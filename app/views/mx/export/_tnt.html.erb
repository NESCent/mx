xread
'generated by mx <%= Time.now -%>
 from matrix: <%=h @mx.name %> (id: <%= @mx.id -%>)'

<%= @continuous_characters.length + @multistate_characters.length %> <%= @otus.length -%>
<% col_width = @otus.inject(0) {|max,o| max >= o.display_name(:type => :matrix_name).length ? max : o.display_name(:type => :matrix_name).length } + 1 -%>

<% if @continuous_characters.length > 0 -%>
<%= @as_file ? '&' : '&amp;' -%> [cont]
<% for otu in @otus -%>
  <%= "#{otu.display_name(:type => :matrix_name).ljust(col_width)} " -%>
  <% @continuous_characters.each do |chr| %><%= Mx.print_codings(@codings_mx, chr, otu) %>&nbsp;<% end -%>
<% end %>
<% end -%>
<% if @multistate_characters.length > 0 -%>
<%= ((@as_file ? '&' : '&amp;') + ' [num]') if @continuous_characters.length > 0 -%>
<%=  -%>
<% for otu in @otus %>
  <%= "#{otu.display_name(:type => :matrix_name).ljust(col_width)} " -%>
  <% @multistate_characters.each do |chr| %><%= Mx.print_codings(@codings_mx, chr, otu) %><% end -%>
<% end -%>
<% end -%>
;

<% i = 0 -%>
cnames
<% for chr in @continuous_characters + @multistate_characters -%>
 {<%= "#{i} #{chr.display_matrix_name} #{chr.display_states}" %>;<% i += 1 %>
<% end -%>
;
